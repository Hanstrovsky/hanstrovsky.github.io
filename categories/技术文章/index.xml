<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术文章 on Hanstrovsky</title>
    <link>https://www.hanstrovsky.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/</link>
    <description>Recent content in 技术文章 on Hanstrovsky</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 01 Mar 2020 12:13:19 +0800</lastBuildDate>
    
	<atom:link href="https://www.hanstrovsky.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于JAVA中源码级注解的编写及使用 </title>
      <link>https://www.hanstrovsky.com/2020/03/01/</link>
      <pubDate>Sun, 01 Mar 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/03/01/</guid>
      <description>一、注解简介： 1.1.什么是“注解”： ​ 在我们编写代码时，一定看到过这样的代码： 1 2 3 4 5 6 7 8 class Student { private String name; @Override public String toString(String str) {//编译错误！ return &amp;#34;Student name = &amp;#34; + name; } } ​ 其中的@Override，就是一个“注解”，@Override一般出现在重写equals()或者toString()方法的上边</description>
    </item>
    
    <item>
      <title>关于数据库设计的三范式与反三范式 </title>
      <link>https://www.hanstrovsky.com/2020/02/27/</link>
      <pubDate>Thu, 27 Feb 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/02/27/</guid>
      <description>范式（数据库设计范式，数据库的设计范式）是符合某一种级别的关系模式的集合。构造数据库必须遵循一定的规则。在关系数据库中，这种规则就是范式。关系数据库中的关系必须满足一定的要求，即满足不同的范式。 一、第一范式 一个字段只记录一件事 在任何一个关系数据库中，第一范式（1NF）是对关系模式</description>
    </item>
    
    <item>
      <title>如何使用Spring Securiry实现前后端分离项目的登录功能</title>
      <link>https://www.hanstrovsky.com/2020/02/18/</link>
      <pubDate>Tue, 18 Feb 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/02/18/</guid>
      <description>如果不是前后端分离项目，使用SpringSecurity做登录功能会很省心，只要简单的几项配置，便可以轻松完成登录成功失败的处理，当访问需要认证的页面时，可以自动重定向到登录页面。但是前后端分离的项目就不一样了，不能直接由后台处理，而是要向前端返回相应的json提示。 在本例的介绍</description>
    </item>
    
    <item>
      <title>关于配置Nginx反向代理后SpringSecurity认证失败的问题解决</title>
      <link>https://www.hanstrovsky.com/2020/02/09/</link>
      <pubDate>Sun, 09 Feb 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/02/09/</guid>
      <description>问题背景 最近在写的一个项目，采用前后端分离的方式进行开发，登录认证使用的是SpringSecurity框架。 问题描述 在项目部署的时候出现了一个问题，在自己电脑上运行的时候一切顺畅，可是部署到服务器上就一直登录失败，分别测试了前端和后端的代码，独立运行没有问题，打开F12查看返回的</description>
    </item>
    
    <item>
      <title>如何在后台封装el-tree所需要的数据格式</title>
      <link>https://www.hanstrovsky.com/2020/02/01/</link>
      <pubDate>Sat, 01 Feb 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/02/01/</guid>
      <description>背景 最近遇到了一个分层级展示指标的需求，前端使用el-tree树形组件，要求按官方文档的格式提供数据。 数据格式： id: 1, label: &#39;一级 1&#39;, children: id: 4, label: &#39;二级 1-1&#39;, children: id: 9, label: &#39;三级 1-1-1&#39;， children: ... 封装思路 1、首先我们需要获取到所有的节点，新建一个集合result来保存所有顶级节点，也就是parentI</description>
    </item>
    
    <item>
      <title>简单说说基于JWT的token认证方式</title>
      <link>https://www.hanstrovsky.com/2020/01/18/</link>
      <pubDate>Sat, 01 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/01/18/</guid>
      <description>一、什么是认证 好多人不知道什么是认证，认证，其实就是服务端确认用户身份。Http协议是无状态的，客户端发送一条请求，服务端返回一条响应，二者就算做成一单买卖，一拍两散。在很久以前，互联网所能提供的服务仅仅是一些页面的浏览，服务器并不需要知道是谁在访问自己，而随着互联网的发展，在很</description>
    </item>
    
    <item>
      <title>如何使用Sping Data JPA更新局部字段</title>
      <link>https://www.hanstrovsky.com/2020/01/27/</link>
      <pubDate>Mon, 27 Jan 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/01/27/</guid>
      <description>问题描述 在更新数据时，有时候我们只需要更新一部分字段，其他字段保持不变。Spring Data JPA并未提供现成的接口，直接使用save()更新会导致其他字段被Null覆盖掉。 解决办法 通常有两种方法解决此问题： 1、通过传入对象的id，从数据库中查询得到原始对象，然后将要修改的字段封装到原</description>
    </item>
    
    <item>
      <title>关于近期学习状态的一些反思</title>
      <link>https://www.hanstrovsky.com/2020/01/09/</link>
      <pubDate>Mon, 20 Jan 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/01/09/</guid>
      <description>一、前言 这段时间一直也没有什么能看到的长进，嘴上一直说学习学习的，但是没有目标，没有计划，行动也是漫无目的，看不到收获，努力学习变成了空喊口号，名副其实地成了个积极废人，每天早早下班，却白白浪费了大好的业余时间。其他方面也是一样的，比如健身减肥，未来如果这个状态持续下去恐怕会恶性</description>
    </item>
    
    <item>
      <title>为什么要使用构造方法进行依赖注入</title>
      <link>https://www.hanstrovsky.com/2020/01/01/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/01/01/</guid>
      <description>一、前言 我们在使用Spring框架进行开发时，不可避免的要进行依赖注入（Dependency Injection），也就是把实例从Spring容器中取出来进行使用。Spring的依赖注入方式主要有三种，分别为Constructor、Setter和Field。有了选择的余地，令人纠结</description>
    </item>
    
  </channel>
</rss>