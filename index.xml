<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hanstrovsky</title>
    <link>https://www.hanstrovsky.com/</link>
    <description>Recent content on Hanstrovsky</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 10 Mar 2020 12:13:19 +0800</lastBuildDate>
    
	<atom:link href="https://www.hanstrovsky.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于配置Nginx反向代理后SpringSecurity认证失败的问题解决</title>
      <link>https://www.hanstrovsky.com/post/6.%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AENginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%90%8ESpringSecurity%E8%AE%A4%E8%AF%81%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Tue, 10 Mar 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/post/6.%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AENginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%90%8ESpringSecurity%E8%AE%A4%E8%AF%81%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid>
      <description>问题背景 最近在写的一个项目，采用前后端分离的方式进行开发，登录认证使用的是SpringSecurity框架。 问题描述 在项目部署的时候出现了一个问题，在自己电脑上运行的时候一切顺畅，可是部署到服务器上就一直登录失败，分别测试了前端和后端的代码，独立运行没有问题，打开F12查看返回的</description>
    </item>
    
    <item>
      <title>如何在后台封装el-tree所需要的数据格式</title>
      <link>https://www.hanstrovsky.com/post/5.%E5%A6%82%E4%BD%95%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%B0%81%E8%A3%85el-tree%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Sun, 01 Mar 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/post/5.%E5%A6%82%E4%BD%95%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%B0%81%E8%A3%85el-tree%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</guid>
      <description>背景 最近遇到了一个分层级展示指标的需求，前端使用el-tree树形组件，要求按官方文档的格式提供数据。 数据格式： id: 1, label: &#39;一级 1&#39;, children: id: 4, label: &#39;二级 1-1&#39;, children: id: 9, label: &#39;三级 1-1-1&#39;， children: ... 封装思路 1、首先我们需要获取到所有的节点，新建一个集合result来保存所有顶级节点，也就是parentI</description>
    </item>
    
    <item>
      <title>如何使用Sping Data JPA更新局部字段</title>
      <link>https://www.hanstrovsky.com/post/4.%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Sping-Data-JPA%E6%9B%B4%E6%96%B0%E5%B1%80%E9%83%A8%E5%AD%97%E6%AE%B5/</link>
      <pubDate>Thu, 20 Feb 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/post/4.%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Sping-Data-JPA%E6%9B%B4%E6%96%B0%E5%B1%80%E9%83%A8%E5%AD%97%E6%AE%B5/</guid>
      <description>问题描述 在更新数据时，有时候我们只需要更新一部分字段，其他字段保持不变。Spring Data JPA并未提供现成的接口，直接使用save()更新会导致其他字段被Null覆盖掉。 解决办法 通常有两种方法解决此问题： 1、通过传入对象的id，从数据库中查询得到原始对象，然后将要修改的字段封装到原</description>
    </item>
    
    <item>
      <title>简单说说基于JWT的token认证方式</title>
      <link>https://www.hanstrovsky.com/post/3.%E7%AE%80%E5%8D%95%E8%AF%B4%E8%AF%B4%E5%9F%BA%E4%BA%8EJWT%E7%9A%84token%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 01 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/post/3.%E7%AE%80%E5%8D%95%E8%AF%B4%E8%AF%B4%E5%9F%BA%E4%BA%8EJWT%E7%9A%84token%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/</guid>
      <description>一、什么是认证 好多人不知道什么是认证，认证，其实就是服务端确认用户身份。Http协议是无状态的，客户端发送一条请求，服务端返回一条响应，二者就算做成一单买卖，一拍两散。在很久以前，互联网所能提供的服务仅仅是一些页面的浏览，服务器并不需要知道是谁在访问自己，而随着互联网的发展，在很</description>
    </item>
    
    <item>
      <title>关于近期学习状态的一些反思</title>
      <link>https://www.hanstrovsky.com/post/2.%E5%85%B3%E4%BA%8E%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E7%8A%B6%E6%80%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/</link>
      <pubDate>Mon, 20 Jan 2020 12:13:19 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/post/2.%E5%85%B3%E4%BA%8E%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E7%8A%B6%E6%80%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/</guid>
      <description>一、前言 这段时间一直也没有什么能看到的长进，嘴上一直说学习学习的，但是没有目标，没有计划，行动也是漫无目的，看不到收获，努力学习变成了空喊口号，名副其实地成了个积极废人，每天早早下班，却白白浪费了大好的业余时间。其他方面也是一样的，比如健身减肥，未来如果这个状态持续下去恐怕会恶性</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://www.hanstrovsky.com/about/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.hanstrovsky.com/about/</guid>
      <description>我就是我，颜色不一样的二货！</description>
    </item>
    
    <item>
      <title>为什么要使用构造方法进行依赖注入</title>
      <link>https://www.hanstrovsky.com/2020/01/01/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://www.hanstrovsky.com/2020/01/01/</guid>
      <description>一、前言 我们在使用Spring框架进行开发时，不可避免的要进行依赖注入（Dependency Injection），也就是把实例从Spring容器中取出来进行使用。Spring的依赖注入方式主要有三种，分别为Constructor、Setter和Field。有了选择的余地，令人纠结</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://www.hanstrovsky.com/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.hanstrovsky.com/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://www.hanstrovsky.com/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.hanstrovsky.com/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>